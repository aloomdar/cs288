1. I created 2 head pointers and 2 tail pointers, 1 each to print the linked list in reverse and normal. I hace a function createNode to create new nodes. I have a void showList that takes in a pointer to the head for a linked list. In the function I create and malloc a node Node and set it to head, then while node != NULL, I print Node->value and set Node to node->next. I have 2 functions for adding nodes to a linked list, one for adding to the end and one for adding to the front of the list. For void addFront, I take in a val, create a new node using createNode, then have new->next=head1 and set head1 to new. This is constantly updating the head pointer since I'm always adding to the front. I check if tail is NULL and if it is then I set the tail to head1. This is because since I'm adding to the front of the list, tail won't be updated and will always point to the end of the list. For void addEnd, i take in var val and create a node the same way I did in addFront. I check if head2 is NULL and if it is then I set it to the new node. This is just to point to the front of the list. I then create a node temp and point it to head2. In my while loop, I check to see if temp->next is NULL. If it isnt then I set temp to the next address in the list to go through the list until I'm at the end. Once I reach the end of the list, I put temp->next to the address of new. In main I keep taking in input for int val while it's not control+d/EOF. Then once that's done, I show the list in reversed order by calling head1, and then in order calling head2.
I hgve the same createNode and addBegin functions as the previous question. I have a new function for struct node *swap where I take in 2 nodes as parameters. I create a temp node and set it to b->next, then set b->next to a and a->next to temp. I then return b. For void bubbleSort, I take in a double pointer for node head, and int n for the number of nodes in the list. I cereate a temp node and an int swapped as a flag to see if the swap has occurred. I create 2 nested for loops. In the first loop i set temp to head and swapped to false/0. In the 2nd for loop, I set node p1 to temp, and p2 to p1->next. I check if p1->value is less than p2->value and if it is, then I set temp to swap, which returns the swapped node and I set temp to the address of the next node. I also set swapped to true/1 if the swap occurs. Once I'm done with the inner for loop, I check if a swap occurred. If it didn't then I break and proceed to the next iteration. I do the same thing at the end of the 1st question I just don't have a showList function to show the list. 
