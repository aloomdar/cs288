1. I use command substition to store in varibale threeAmin the number of lines in dictionary.txt that have at least 3 a's in it. My grep line looks for a*.*a.*a.*a.*a*, which is 0 or more occurences of a followed by zero or more occurences of any character then a and I repeat the pattern. Then I echo the number of lines that have at least 3 a's because each line is one word. Then I make 2 new variables called v1 and v2 where v1 is storing the number of lines where there are exactly 3 e's in it without e being the first letter then v2 stores the number of lines where E is the first letter and the word has exactly 3 e's. Then I add v1 and v2 to get the total number of words with exactly 3 e's. I then create some temp files, doubleE.txt, mostCommonThree.txt, sorting.txt and sorted.txt. I use grep to find the words that have 2 ee's in it using the regex [a-zA-Z]*e{2,}[a-zA-Z]*. I then use grep .{4}$ to look for the last 4 letters because for some reason .{3}$ gave me only 2 letters so there's probably a whitespace character at the end of each word. I use > to overwrite to doubleE.txt for the first regex I mentioned then the 2nd regex I mentioned looks for that patter in doubleE.txt and writes it to mostCommonThree.txt. Then I sort that file and get rid of all the duplicates while getting the number of occurences using uniq cd into sorting.txt. I use sort -nr on sorting.txt where I sort numerically in descending order into sorted.txt. Then I use head -3 sorted.txt to get the first three items from sorted.txt and rm all the temp files. 
2. I store the passed c file in a var called file. I use regex in my if statement to check if the passed file ends in .c to confirm it's a c file. I then use command substitution to use grep 'printf' for the file and use wc -l to get the number of lines with that. I do the same thing with scanCount as well. I also create a var called totalLines where I use wc -l to get the total number of lines in the file. I create 2 vars for print and scan percetn where I find trhe percentage of lines that have scanf or printf in it. I echo all my variables then I check to see if scanf_log.txt exists. If it does, I use sed to get the entire line with scanf and use >> to append it to the scanf txt file. I do the same thing for printf_log.txt
3. I created a traverse function where I check if the passed argument to the function is a directory. If it's not, then I return. If it is a directory, then I create a local var entries where it's an array of all the files in the directory. I create a for loop using local var entry in all the elements in entries and check if it's a file. If it is, then I use grep to find the proper emails in the entry and append it into a temp.txt file. If entry is not a file, it's probably a directory so I call traverse on that entry. That's the end of the traverse function. I now touch temp.txt and unique_emails.txt. I call traverse on $1. I then sort temp.txt and pipe it into uniq to get rid of duplicates and have it overwritten into unque_emails.txt and remove temp.txt
4. For some reason it's not working when I'm trying to test it, I don't know why. It worked before and now it's not.
