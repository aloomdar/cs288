1. I made a function for the computer's choice in rock paper scissors using modulo 3 and added 1 to it so that it would work with my case statement. In my case statement I have 1 set to rock, 2 to paper, 3 to scissors and any other number wouldlead to an error although unlikely. I echoed that choice so that I could store it in a variable. I then made a game function where two arguments would be passed into it, the computer's choice and the players choice. Then I made a large if else if statement for the arguments. If the computer and player have the same choice, it would echo a tie to the player and ask them to make another choice. The computer would also make another choice and I would pass the 2 new choices into the game function recursively. If the player throws a winning decision, then there is an echo statement saying they won and if they throw a losing decision then it would echo they lost. When the program runs, the player is greeted with the rules and asks their choice. Their choice is stored in the var choice and the computers choice is stored in p2choice and then I call the game function with the choices chosen.
2. I have the var fname set to the argument passed into the program. If there is nothing passed, the user is prompted to enter a filename or directory. I check if the passed argument is a file or directroy. If it's a file I check for read permissions and if there is none, then I give a warning saying there is no read permissions for the file and I exit. If there is, then I created 3 vars, wordCount, lineCount, and charCount. I use command substitution to sort the file and use wc with the respective options for word, line and char count and store it in the correct vars. I then check the size of charCount to see if the file is text heavy, moderately sized, or a light file. If the passed argument is a directory, I check for read and exectue permissions. If there is not then I give a warningn stating that there are no read/execute permissions and exit. If there is, then I cd to that directory, echo the number of files and subdirectories using command substituion, thn use the du command to check the disk usage of each file/subdirectory. The output in my screenshots show more than 7 files and directories because when I use du to show the files/directories and the amount of space they check up, it checks the space of the directory as well as the files inside the directory but there is only 7 items in my directory for the screenshot. 
3. The first thing I do is check if the number of passed arguments is 0. If there are no passed arguments then I echo that there are no filenames provided. I then check if there are less than 3 arguments provided. I echo an error saying that at least 3 filenames need to be provided if there is less then exit. If the first 2 conditions are met, then I mkdir a directory called backup_ whatever the current date is. I then create a log.txt in the current directory. I create a for loop for each argument and check if they exist. If at least one of the files does not exist, I echo that to the user and continue with creating backups. If the argument does exist, then I make a copy of the file and add the current date to the name of the file, move it to the new backup directory, then echo the name of the original file and the name of the new file and direct it into log.txt. Once everything is done, I echo that the backup is completed and show the location. I then move log.txt into the new backup folder.
4. I made a function menu called menu24 which outputs a menu showing a list of files modified in the past 24 hours. I set the current time to the date in seconds in var currentTime. I created a var pastDay which stores the difference between the current date in seconds and the number of seconds in a day. I ask the user to enter the name of a file or subdirectory and tell them if they wish to exit to enter control + c. Then I create a for loop for each item in the directory and create a var modifiedTime which finds the number of seconds ago that the item was modified. If the modified time is greater than the past day, which means that it was recently modified in the past 24 hours. I then create a traverse function where it takes in an argument. If the argument is a file, then it displays the first 10 lines using head. I ask the user if they want to display more and if they say Y, then we enter a while loop where while answer is Y I display the next 10 lines using tail. I then ask the user again if they would like to display more from the file and let them know that if they see an empty screen then the end of file is reached. I store the answer again (Y/n) and if n, then the loop breaks and I display a menu of files/directories modified in the past 24 hours. I store the selection and recursively call the traverse function for whatever the selection is. For the second if statement in the traverse function, if the passed argument is a directory, I cd to the directory, call the menu24 function and read the selection from the user then call the traverse function for whatever the selection is. When the program starts, I ask the user to enter a directory name and store it in the var dirname. I check if it exists and if it does not, then I tell the user and ask them if they would like to create the directory. If Y, then the directory is made using mkdir and the program exits. If the user say n, then we exit. If the directory entered exists, I cd to the directory, do the same thing in the  menu24 function just without checking if the files have been modifed, read the selection from the user, then call the traverse function on whatever selection the user has entered.
