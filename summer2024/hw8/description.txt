1. I created a countsort function to call when I scatter the array to other processes. I first initialized MPI and found the number of tasks and the task ids. Then I set the filename to argv[1] and opened it in reading mode. I then created an array and used malloc to allocate space for 1000 terms. I created an array which i set equal to fread. I created a local array and malloced that for 1000 elements to use when scattering the data among processes. I created an int split so I can divide the array based on how many tasks there are. I then scattered the data using MPI scatter from arr to localArr among all the processes. I then called countsort then MPI gather. I called MPI barrier to wait for all the processes to catch up then wrote the data to the file.
2. I created a calculate pi function that takes in the thread id and does the same calculations that was in the slide. In my main, I check if there are enough arguments. If no, then i prompt for it. I then create a pthread thread and allocated it for the number of threads specified. I made a for loop where I create threads and passed the calculate pi function. I then do the same for loop to join the data and once that is done i free the pthread t. I caculate pi and print it then exit the pthread. I use mutex to make sure that all the processes cant access the variable sum at the same time so that the output isn't overwritten.

I had to do this on a vm because for some reason I was getting an error with my stack limit being reached and I couldn't resolve it, so that's why the green part is different from usual.
